<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>如何在go中写好单元测试</title><url>https://lemon-1997.github.io/post/best-test.html</url><categories><category>最佳实践</category></categories><tags><tag>go</tag><tag>单元测试</tag></tags><content type="html"><![CDATA[当你还在用postman测试你的api时，那表明你还没找到使用go的最佳姿势，阅读这篇文章，一起来了解下go内置的测试框架，这会对你有所帮助。
单元测试 单元测试是我们项目开发中不可缺少的一部分，如果一个go项目没有单元测试，且刚好项目交接到你手里，由你来维护，那会很棘手，没有测试，意味着无法掌控这个项目，它就像一个定时炸弹，随时会产生bug。作为程序员，我们必须好好了解下单元测试。
单元测试基本概念  单元测试：应用中最小可测试部分，能够单独运行，用于被检测代码是否按照预期工作 测试用例：是一组测试，包括输入，执行条件，以及预期结果等 覆盖率：测试的度量，用来衡量代码被测试的比例 测试驱动开发：先有测试，后再通过修改代码使测试通过的开发方式  单元测试的优点  易于调试 提前发现问题 短代码，简洁且高质量  可能有人会觉得写单元测试是一件很麻烦的事，认为浪费时间。但也许你写了单元测试，他能减少你项目出问题排错的时间，也能让你更好的运行指定的代码，更精准的找到问题。写单元测试其实为你带来了效率上的提升，并且在go中，为项目增加单元测试非常简单。
go内置测试框架 go官方包自带了测试框架，这不仅仅是go官方为了所有gopher能更方便的写测试，也直接证明了测试的重要性，官方直接把他丢进了std里，可见一斑。 在最新版本的go中，go团队加入了模糊测试，不过本篇文章只涉及单元测试，不会讲解基准测试以及模糊测试。
testing.T 在go中写单元测试，我们先写了解下 testing.T 这个类型以及其持有的方法
// TB is the interface common to T and B. type TB interface { Cleanup(func()) Error(args ...interface{}) Errorf(format string, args ...interface{}) Fail() FailNow() Failed() bool Fatal(args ...interface{}) Fatalf(format string, args ...interface{}) Helper() Log(args ...interface{}) Logf(format string, args ...interface{}) Name() string Skip(args ...interface{}) SkipNow() Skipf(format string, args ...interface{}) Skipped() bool TempDir() string // A private method to prevent users implementing the  // interface and so future additions to it will not  // violate Go 1 compatibility.  private() } type T struct { common isParallel bool context *testContext // For running tests and subtests. } var _ TB = (*T)(nil) 这里顺便给大家科普下，var _ TB = (*T)(nil) 这行语句，使用了编译时断言，如果 T 没有实现 TB 里定义的方法，那么编译就会报错，这样能让开发者及时发现问题，避免错误的发生。大家平常写代码也可以使用编译时断言来让自己的项目更加健壮。
常用方法
 Logf：记录日志，提供代码测试时运行信息 Errorf：记录日志，但会让测试不能通过 Fatalf：记录日志，测试立即停止且测试失败 Skipf：记录日志，并跳过该测试函数 Cleanup：清理函数，资源的释放 Helper：辅助函数，打印文件行信息  官方例子 testing.T 看起来比较简单，老规矩，先上官方例子
package greetings import ( &#34;testing&#34; &#34;regexp&#34; ) // TestHelloName calls greetings.Hello with a name, checking // for a valid return value. func TestHelloName(t *testing.T) { name := &#34;Gladys&#34; want := regexp.MustCompile(`\b`+name+`\b`) msg, err := Hello(&#34;Gladys&#34;) if !want.MatchString(msg) || err != nil { t.Fatalf(`Hello(&#34;Gladys&#34;) = %q, %v, want match for %#q, nil`, msg, err, want) } } // TestHelloEmpty calls greetings.Hello with an empty string, // checking for an error. func TestHelloEmpty(t *testing.T) { msg, err := Hello(&#34;&#34;) if msg != &#34;&#34; || err == nil { t.Fatalf(`Hello(&#34;&#34;) = %q, %v, want &#34;&#34;, error`, msg, err) } } 上面的例子大家应该都看得懂，我就不总结具体的测试流程了，这里主要是为了给大家展示在go中写单元测试是多么方便。
最佳实践 starting 在开始之前，我们要先了解go的测试规范
 文件名：前缀为测试代码的文件名，以 _test.go 结尾（go build 会忽略这些文件） 文件位置：位于测试的代码同一 package 下 函数名：Test 为前缀，后面是测试函数名，函数参数为 *testing.T  table test table test 是一种很棒的写法，它能让你的测试代码足够清晰，让你的测试用例易于维护，该写法可以在各种库中见到。其大体流程为：
 定义tests 为测试用例，其结构为匿名结构体切片 []struct{} 补充匿名结构体变量，定义好输入输出，丰富测试用例 遍历测试用例，调用测试方法，判断测试结果是否符合预期 使用 testing.T 里的方法记录日志或让测试失败  go源码 encoding/json/encode_test.go 里就采用了这种测试方式
func TestRoundtripStringTag(t *testing.T) { tests := []struct { name string in StringTag want string // empty to just test that we roundtrip 	}{ { name: &#34;AllTypes&#34;, in: StringTag{ BoolStr: true, IntStr: 42, UintptrStr: 44, StrStr: &#34;xzbit&#34;, NumberStr: &#34;46&#34;, }, want: `{ &#34;BoolStr&#34;: &#34;true&#34;, &#34;IntStr&#34;: &#34;42&#34;, &#34;UintptrStr&#34;: &#34;44&#34;, &#34;StrStr&#34;: &#34;\&#34;xzbit\&#34;&#34;, &#34;NumberStr&#34;: &#34;46&#34; }`, }, { // See golang.org/issues/38173. 	name: &#34;StringDoubleEscapes&#34;, in: StringTag{ StrStr: &#34;\b\f\n\r\t\&#34;\\&#34;, NumberStr: &#34;0&#34;, // just to satisfy the roundtrip 	}, want: `{ &#34;BoolStr&#34;: &#34;false&#34;, &#34;IntStr&#34;: &#34;0&#34;, &#34;UintptrStr&#34;: &#34;0&#34;, &#34;StrStr&#34;: &#34;\&#34;\\u0008\\u000c\\n\\r\\t\\\&#34;\\\\\&#34;&#34;, &#34;NumberStr&#34;: &#34;0&#34; }`, }, } for _, test := range tests { t.Run(test.name, func(t *testing.T) { // Indent with a tab prefix to make the multi-line string 	// literals in the table nicer to read. 	got, err := MarshalIndent(&amp;test.in, &#34;\t\t\t&#34;, &#34;\t&#34;) if err != nil { t.Fatal(err) } if got := string(got); got != test.want { t.Fatalf(&#34; got: %s\nwant: %s\n&#34;, got, test.want) } // Verify that it round-trips. 	var s2 StringTag if err := Unmarshal(got, &amp;s2); err != nil { t.Fatalf(&#34;Decode: %v&#34;, err) } if !reflect.DeepEqual(test.in, s2) { t.Fatalf(&#34;decode didn&#39;t match.\nsource: %#v\nEncoded as:\n%s\ndecode: %#v&#34;, test.in, string(got), s2) } }) } } mock test 当我们由于某些原因，不好直接调用我们的函数去做测试时，我们应该如何做呢？答案就是 interface ，如果我们的测试函数输入刚好是 interface 时，那很棒，如果不是呢，考虑下将函数参数抽象为 interfae ，是否你的代码会更好。
直接看下面的例子，这也是来自go源码 io/io_test.go
type zeroErrReader struct { err error } func (r zeroErrReader) Read(p []byte) (int, error) { return copy(p, []byte{0}), r.err } type errWriter struct { err error } func (w errWriter) Write([]byte) (int, error) { return 0, w.err } // In case a Read results in an error with non-zero bytes read, and // the subsequent Write also results in an error, the error from Write // is returned, as it is the one that prevented progressing further. func TestCopyReadErrWriteErr(t *testing.T) { er, ew := errors.New(&#34;readError&#34;), errors.New(&#34;writeError&#34;) r, w := zeroErrReader{err: er}, errWriter{err: ew} n, err := Copy(w, r) if n != 0 || err != ew { t.Errorf(&#34;Copy(zeroErrReader, errWriter) = %d, %v; want 0, writeError&#34;, n, err) } } 这里通过 zeroErrReader 和 errWriter mock数据，分别实现了 io.Reader 以及 io.Writer ，当我们写测试时，具体怎样mock取决于你想测试的东西。
dependency injection 有些时候，我们的测试需要外部依赖，例如我们需要数据库实例或者http server，这时候我们可以利用 TestMain 的特性
来看看go源码 net/http/main_test.go
func TestMain(m *testing.M) { setupTestData() installTestHooks() st := m.Run() testHookUninstaller.Do(uninstallTestHooks) if testing.Verbose() { printRunningGoroutines() printInflightSockets() printSocketStats() } forceCloseSockets() os.Exit(st) } 执行测试的时候，会优先执行 TestMain ，然后再通过 m.Run() 执行其他的测试，最好释放我们的资源，这样就解决了我们的资源依赖问题。这里给出一个模板参考，具体的 setup() 和 teardown() 的实现由自己的项目代码所决定。
func setup() { fmt.Printf(&#34;Setup&#34;) } func teardown() { fmt.Printf(&#34;Teardown&#34;) } func TestMain(m *testing.M) { setup() code := m.Run() teardown() os.Exit(code) } 结语 这篇文章所讲的东西都是自己最近写单元测试的一些感悟，如果有错误可在下方评论指出，如果对你有帮助，我也很希望在评论区看到你的评论。 好了，到这里就结束了，感谢阅读！
]]></content></entry><entry><title>mysql事务在go语言中的正确打开方式</title><url>https://lemon-1997.github.io/post/best-transaction.html</url><categories><category>最佳实践</category></categories><tags><tag>go</tag><tag>mysql</tag></tags><content type="html"><![CDATA[相信大家在做curd项目时经常会使用到mysql中的事务，这篇文章将会展示在go中实现mysql事务的几种方式，希望阅读后能够给你带来启发。
mysql事务 mysql的事务保证了我们应用程序和业务逻辑的可靠，是我们日常开发重要的一环，我们必须了解其特性，才能更好的使用它。
ACID模型 首先介绍下 ACID 模型
 A：原子性。事务中的操作要么 commit 成功，要么全部 rollback C：一致性。事务的执行前后数据要一致，主要是保护数据丢失，比如 innodb 中的崩溃恢复机制 I：隔离性。事务内部的操作与其他事务的隔离，比如隔离级别以及锁机制 D：持久性。事务提交后对数据库具有永久性  使用场景 上面的ACID其实已经可以体现出事务的使用场景。举几个例子
 用户下单时，需要在订单表创建一条记录，并扣减商品的库存 转账时，一方扣款，另一方必须增加对应的金额 查询到其他事务还没有提交的数据，导致脏读  了解了什么是事务，接下来我们一起看下在go中是怎么开启事务。
go实现方式 go开启事务的几个步骤
 开启事务 执行数据库操作 结束事务  提交事务 回滚事务    看起来很简单，就三个步骤而已，下面看下具体的代码实例。
go官方例子 先欣赏下go官方提供的例子
// CreateOrder creates an order for an album and returns the new order ID. func CreateOrder(ctx context.Context, albumID, quantity, custID int) (orderID int64, err error) { // Create a helper function for preparing failure results.  fail := func(err error) (int64, error) { return fmt.Errorf(&#34;CreateOrder: %v&#34;, err) } // Get a Tx for making transaction requests.  tx, err := db.BeginTx(ctx, nil) if err != nil { return fail(err) } // Defer a rollback in case anything fails.  defer tx.Rollback() // Confirm that album inventory is enough for the order.  var enough bool if err = tx.QueryRowContext(ctx, &#34;SELECT (quantity &gt;= ?) from album where id = ?&#34;, quantity, albumID).Scan(&amp;enough); err != nil { if err == sql.ErrNoRows { return fail(fmt.Errorf(&#34;no such album&#34;)) } return fail(err) } if !enough { return fail(fmt.Errorf(&#34;not enough inventory&#34;)) } // Update the album inventory to remove the quantity in the order.  _, err = tx.ExecContext(ctx, &#34;UPDATE album SET quantity = quantity - ? WHERE id = ?&#34;, quantity, albumID) if err != nil { return fail(err) } // Create a new row in the album_order table.  result, err := tx.ExecContext(ctx, &#34;INSERT INTO album_order (album_id, cust_id, quantity, date) VALUES (?, ?, ?, ?)&#34;, albumID, custID, quantity, time.Now()) if err != nil { return fail(err) } // Get the ID of the order item just created.  orderID, err := result.LastInsertId() if err != nil { return fail(err) } // Commit the transaction.  if err = tx.Commit(); err != nil { return fail(err) } // Return the order ID.  return orderID, nil } 这是go官方提供的例子，大体的代码流程如下
 通过 DB.Begin / DB.BeginTx 获取 sql.Tx 延迟调用 Tx.Rollback 执行数据库的插入修改语句 没有出错，通过 Tx.Commit 提交  这种方式看起来很不错，失败了能回滚，成功则一起提交，很清晰的表明事务的整个流程。 但是当你项目的业务逻辑愈加复杂，或者事务里面的某个表新加了字段，需要去调整SQL语句的时候，你必须在这个大函数里面去修改，这看起来很危险。 像这个例子所体现的，该函数里面做了多个SQL操作，除了单一的业务场景，很难被别的地方复用。
mysql事务封装 于是，针对上面的问题，可以先将事务的操作封装起来，并抽离出数据库执行SQL的函数 fn
func WithTransaction(db *sql.DB, fn func(sql.Tx) error) (err error) { tx, err := db.Begin() if err != nil { return } defer func() { if p := recover(); p != nil { // a panic occurred, rollback and repanic 	tx.Rollback() panic(p) } else if err != nil { // something went wrong, rollback 	tx.Rollback() } else { // all good, commit 	err = tx.Commit() } }() err = fn(tx) return err } 因此使用起来只需要编写相应的数据库操作函数 fn，我们可以对订单，商品数据的操作做更细粒度的封装，就像下面这样
err = WithTransaction(db, func(tx sql.Tx) error { // insert a record into order table 	res, err := dao.CreateOrder(tx,order) if err != nil { return err } // update product inventory 	res, err = dao.UpdateInventory(tx,product) if err != nil { return err } }) 好了，目前看来这个例子已经很完美了，我们不需要写过多的重复代码，事务的操作，数据库执行的SQL都能被很好的复用。 但是还有个问题，上面的 CreateOrder 和 UpdateInventory 函数需要传入 sql.Tx，这会使调用者难以下手，理论上调用者不应该关心传入哪个数据库，他只想完成创建订单，扣减库存的操作。 而且，当你的事务只需要执行一次SQL时，并不需要开启事务的，但你的传参确实 sql.Tx，这会导致多余的代码，且很不优雅。
interface登场 假设我们现在有一个数据库操作对象 Dao
type Dao struct{ db *sql.Db } func (d *Dao ) CreateOrder(ctx context, order entity.Order) error { d.db.ExecContext(ctx, `Insert into`, order) } func (d *Dao ) UpdateInventory(ctx context, product entity.Product) error { d.db.ExecContext(ctx, `Insert into`, product) } 如果我们现在需要开启一个事务，这个事务里需要执行 CreateOrder 和 UpdateInventory，这个时候，很多人的第一个想法是重新写一个函数，因为现有的函数都是由 sql.Db 去执行，而不是 sql.Tx。 那我们有没有办法减少重复代码的开发呢？答案是有的，那就是 interface{}
// Queries is a common interface that is used by both *sqlx.DB and *sqlx.Tx. type Queries interface { QueryRowxContext(ctx context.Context, query string, args ...interface{}) *sqlx.Row QueryxContext(ctx context.Context, query string, args ...interface{}) (*sqlx.Rows, error) NamedExecContext(ctx context.Context, query string, arg interface{}) (sql.Result, error) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) } 在这里，我们定义了一个叫 Queries 的 interface 去实现 sql.Db 和 sql.Tx 。那么再对 Dao 重新调整一下，并对外提供一个 New 函数，支持传入 sql.Db 和 sql.Tx
type Dao struct{ db Queries } fun NewOderDao (db Queries) *Dao{ return &amp;oderDao{db:db} } 这样一来，我们通过 Queries 使 Dao 中的函数可以同时是普通执行或者开启事务执行，且调用相关函数时不需要传入数据库对象。那么问题来了，如何与上面封装好的 WithTransaction一起使用呢？
best practices 上面的 WithTransaction 函数注入了 sql.Tx，那么，我们可以将两者结合，改变一下注入对象，将 Dao 注入给 fn
func WithTransaction(db *sql.DB, fn func(dao *Dao) error) (err error) { tx, err := db.Beginx() if err != nil { return } defer func() { if p := recover(); p != nil { // a panic occurred, rollback and repanic 	tx.Rollback() panic(p) } else if err != nil { // something went wrong, rollback 	tx.Rollback() } else { // all good, commit 	err = tx.Commit() } }() // inject 	dao := NewOderDao(tx) err = fn(dao) return err } 这样一来，调用 WithTransaction 就可以拿到数据库操作对象了。最后别忘了补充单元测试，那是你go项目中可靠性以及可维护性的一部分
// init db dao func init(){ } func Test_WithTransaction(t *testing.T) { tests := []struct{ fn func(dao *Dao)error // out? or else  }{ { func(dao *Dao)error{ ctx, cancel := context.WithCancel(context.Background()) cancel() err := dao.CreateOrderInfo(ctx, &amp;order) if err != nil { t.Logf(&#34;error %v emit roollback&#34;, err) return err } t.Logf(&#34;comit order %v&#34;, order) return nil }, }, { func(dao *Dao)error{ return nil }, }, } for _, tt := range tests{ _ = WithTransaction(db, tt.fn) } } 结语 关于mysql的事务操作，相信还有更优秀的写法，这篇文章的例子也许不是最好的，但希望能给你带来启发，有兴趣的可以在下方评论与我交流。
]]></content></entry><entry><title>后端开发必备的工具及网站</title><url>https://lemon-1997.github.io/post/other-develop.html</url><categories><category>随想记录</category></categories><tags><tag>后端</tag></tags><content type="html">other-develop</content></entry><entry><title>Kratos的设计哲学</title><url>https://lemon-1997.github.io/post/frame-kratos.html</url><categories><category>框架教程</category></categories><tags><tag>go</tag><tag>kratos</tag></tags><content type="html">frame-kratos</content></entry><entry><title>实现go代码生成工具</title><url>https://lemon-1997.github.io/post/project-ddlGen.html</url><categories><category>项目实战</category></categories><tags><tag>go</tag><tag>generate</tag></tags><content type="html">project-ddl-gen</content></entry><entry><title>go上下文Context包源码分析</title><url>https://lemon-1997.github.io/post/source-context.html</url><categories><category>源码分析</category></categories><tags><tag>go</tag><tag>context</tag></tags><content type="html">source-context</content></entry><entry><title>lemon</title><url>https://lemon-1997.github.io/about/</url><categories/><tags><tag>lemon</tag></tags><content type="html">大家好，我是lemon，目前在深圳从事互联网相关的工作。从事后端开发已经有几年时间了，主要使用的语言是go，平常喜欢去研究go，一直致力于写出更优雅的go代码。建立此博客的初衷一是为了分享给其他人，二是自己分享了，也会去总结，自己能够有所收获。
博客专题 最佳实践 源码分析 项目实战 框架教程 随想记录 博客地址 国内： https://lemon-1997.pages.dev/ 国外： https://lemon-1997.github.io/ 联系方式 Github： https://github.com/lemon-1997 邮箱：lemom_ 1997@126.com 评论：参与下方评论与我交流</content></entry></search>