<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on lemon blog</title><link>https://lemon-1997.github.io/post/</link><description>Recent content in Posts on lemon blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 30 Nov 2024 12:30:00 +0800</lastBuildDate><atom:link href="https://lemon-1997.github.io/post/rss.xml" rel="self" type="application/rss+xml"/><item><title>Kratos：Go微服务框架的优秀设计</title><link>https://lemon-1997.github.io/post/frame-kratos.html</link><pubDate>Sat, 30 Nov 2024 12:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-kratos.html</guid><description>&lt;p>在现代微服务架构的浪潮中，开发者面临着越来越高的性能要求和复杂的系统设计挑战。Go 语言凭借其高效、轻量级的特性，成为了构建微服务的热门选择。而 Kratos 作为一款 Go 开发的微服务框架，以其模块化、易扩展、和高性能的设计，迅速吸引了大量开发者的关注。 在本文中，我们将从框架设计的角度，剖析 Kratos 的优秀特性和设计理念。&lt;/p></description></item><item><title>gRPC Metadata的误解</title><link>https://lemon-1997.github.io/post/source-metadata.html</link><pubDate>Wed, 14 Aug 2024 17:15:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/source-metadata.html</guid><description>&lt;p>最近在处理线上问题时，我遇到一个与 gRPC Metadata 相关的困惑。起初，我以为在 gRPC 请求中，metadata 中相同的 key 会发生覆盖，但实际情况并非如此。相同的 key 并不会覆盖前一个值，反而会形成一个数组，就像 HTTP header 的设计一样。这一现象在初次遇到时并不明显，为了弄清楚其中的原理，我决定深入源码进行分析，最终发现了其中的细节并排查出了导致问题的根源。&lt;/p></description></item><item><title>Go语言的黑科技：编译劫持与隐形链接的应用</title><link>https://lemon-1997.github.io/post/best-magic.html</link><pubDate>Fri, 31 May 2024 16:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/best-magic.html</guid><description>&lt;p>在Go语言的世界里，有很多被戏称为“黑魔法”的技巧和特性，它们超越了常规的开发范畴，为开发者提供了更大的灵活性和控制力。从使用&lt;code>unsafe&lt;/code>包进行内存操作，到利用&lt;code>reflect&lt;/code>包进行运行时类型检查，再到使用&lt;code>cgo&lt;/code>与C语言进行交互，这些技术都在特定情况下展现出了强大的能力。&lt;/p>
&lt;p>然而，在这个被熟知的黑魔法所充斥的世界中，还存在着一些鲜为人知的高级技巧，它们虽不为大多数开发者所熟知，却在某些特定场景下展现出了强大的威力。本文将带领你进入Go语言的神秘境地，探索编译劫持与隐形链接这两种高阶黑魔法的奥秘。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（五）：代理</title><link>https://lemon-1997.github.io/post/project-grpc-5.html</link><pubDate>Fri, 19 Jan 2024 15:50:20 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-5.html</guid><description>&lt;p>代理模块作为最外层的关键组件，统一处理外部HTTP请求、调用底层模块进行gRPC转换，并返回HTTP响应。本文将详细介绍代理模块的设计理念、核心功能和实现细节，以构建一个高效、稳定、可扩展的代理服务。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（四）：编解码</title><link>https://lemon-1997.github.io/post/project-grpc-4.html</link><pubDate>Sat, 13 Jan 2024 13:15:19 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-4.html</guid><description>&lt;p>编解码模块是系统的关键模块，起到了至关重要的作用。它承担着将HTTP请求和响应与gRPC消息格式之间进行转换的任务，确保了请求能够顺利地传递到目标服务并返回结果。本文将详细介绍编解码模块的设计与实现，以及如何处理转换过程中的各种细节和挑战。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（三）：路由</title><link>https://lemon-1997.github.io/post/project-grpc-3.html</link><pubDate>Sat, 06 Jan 2024 21:50:20 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-3.html</guid><description>&lt;p>在构建高效、可扩展的后端服务体系中，路由模块起着至关重要的作用。它负责接收前端请求，并根据请求中的信息，精准地将请求导向到相应的后端gRPC服务。本文将深入探讨如何设计并实现一个稳健、高效的路由模块，以确保请求能够准确、快速地到达目标服务。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（二）：反射</title><link>https://lemon-1997.github.io/post/project-grpc-2.html</link><pubDate>Sun, 31 Dec 2023 17:12:11 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-2.html</guid><description>&lt;p>在上一篇博客中，我们介绍了将HTTP请求转换为gRPC请求的总体设计思路，讲述了实现代理所需要的基本模块。然而，实现这一设计的过程中，一个关键的技术挑战是如何在不知道具体gRPC服务定义的情况下，动态地调用这些服务。这正是本篇博客要深入探讨的内容——利用gRPC的反射机制实现动态服务调用。&lt;/p>
&lt;p>通过引入gRPC反射，我们的代理服务将能够更加智能化和自适应。它不仅可以处理已知的gRPC服务，还能在遇到新的、未知的服务时，通过反射机制动态地获取服务定义并进行调用。这将极大地增强我们代理服务的可扩展性和适应性。&lt;/p>
&lt;p>接下来，我们将首先简要介绍gRPC反射的基本概念和用途，然后通过具体的代码示例详细展示如何利用反射机制实现动态服务调用。让我们一起进入gRPC反射的世界，探索其为我们带来的无限可能。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（一）：设计</title><link>https://lemon-1997.github.io/post/project-grpc.html</link><pubDate>Sat, 25 Nov 2023 23:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc.html</guid><description>&lt;p>在当前主流的微服务架构中，许多公司选择使用gRPC协议作为内部通信机制。然而，在与外部系统进行交互时，HTTP仍然是不可或缺的协议。为了解决这一问题，常见的解决方案是采用grpc-gateway或其他网关自带的插件进行协议转换。但是，这些方案都存在一个共同的痛点：每次更新服务都需要手动更新proto或pb文件，并重新配置网关，这给开发者带来了不小的麻烦。因此，我们迫切需要一个不依赖于proto文件、能够动态感知gRPC服务的插件，以简化这一流程并提高开发效率。本文将探讨这一问题的背景、现有解决方案的局限性，以及我们所期望的理想插件应具备的特性。&lt;/p></description></item><item><title>Google分布式框架Weaver（五）：实现自己的部署器</title><link>https://lemon-1997.github.io/post/frame-weaver-5.html</link><pubDate>Thu, 20 Apr 2023 18:41:58 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-weaver-5.html</guid><description>&lt;p>上一节我们了解到了weavelet，envelope之间的通信，以及babysister是如何管理各个component，weaver命令多进程部署是如何工作的。
weaver支持开发者去实现部署，可以利用它去实现指定副本的多进程部署（weaver自带的命令默认副本数为2个），多机器部署等等，下面，我将介绍如何去实现自己的部署应用。&lt;/p></description></item><item><title>Google分布式框架Weaver（四）：多进程部署原理</title><link>https://lemon-1997.github.io/post/frame-weaver-4.html</link><pubDate>Thu, 30 Mar 2023 19:15:36 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-weaver-4.html</guid><description>&lt;p>到上一小节，我们已经学会了如何去使用weaver进行项目开发，相信很多人对weaver的原理很感兴趣，想了解weaver内部到底是如何实现的。
这一节，我将介绍weaver在多进程部署中，组件之间的通信过程。&lt;/p></description></item><item><title>Google分布式框架Weaver（三）：测试与可观测性</title><link>https://lemon-1997.github.io/post/frame-weaver-3.html</link><pubDate>Tue, 21 Mar 2023 20:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-weaver-3.html</guid><description>&lt;p>上一次我们通过weaver中的组件完成了一个简易的商品后台系统，并对外提供http接口。
但是在实际开发中，除了业务逻辑的实现，少不了测试代码，也少不了可观测性（日志，指标，链路追踪）。&lt;/p></description></item><item><title>Google分布式框架Weaver（二）：组件搭建商品后台</title><link>https://lemon-1997.github.io/post/frame-weaver-2.html</link><pubDate>Wed, 15 Mar 2023 21:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-weaver-2.html</guid><description>&lt;p>组件是weaver中的一个核心抽象，在我们的应用中，组件是一组接口的实现，可以理解为微服务对外提供的API。
所以，组件是学习这个框架的第一步，接下来我将使用组件从零搭建一个简易的商品后台系统。&lt;/p></description></item><item><title>Google分布式框架Weaver（一）：单体开发，微服务运行</title><link>https://lemon-1997.github.io/post/frame-weaver.html</link><pubDate>Wed, 08 Mar 2023 20:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-weaver.html</guid><description>&lt;p>最近，Google开源了一个用于编写、部署和管理分布式应用程序的编程框架：Service Weaver。
这个框架设计思想很巧妙，使用该框架可以以函数调用的方式去调用其他服务，无需考虑任何网络或者序列化问题，在部署时却能够以微服务的方式运行。
这样一来，开发者可以在自己的机器上运行、测试和调试，非常的方便。&lt;/p></description></item><item><title>解决重复请求和缓存击穿，go神器SingleFlight深度解析</title><link>https://lemon-1997.github.io/post/source-singleFlight.html</link><pubDate>Wed, 01 Mar 2023 22:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/source-singleFlight.html</guid><description>&lt;p>当应用程序面临高并发请求时，重复请求往往是一种常见的问题。针对这一问题，Go 语言中提供了 SingleFlight 库，它可以有效地解决并发请求中的重复请求问题，提升应用程序的性能和稳定性。在本文中，我们将介绍 SingleFlight 库的作用和价值，并详细讲解如何在 Go 语言中使用 SingleFlight 库来解决并发请求中的重复请求问题。同时，我们将探讨 SingleFlight 库的原理和实现，以及其在实际项目中的应用场景和注意事项。&lt;/p></description></item><item><title>go整洁架构简单模板</title><link>https://lemon-1997.github.io/post/best-clean.html</link><pubDate>Sat, 28 Jan 2023 15:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/best-clean.html</guid><description>&lt;p>在日常开发中，我们大多的精力都花在业务开发上，设计可能只占用了少部分的时间。
实际上，好的架构会让别人维护起来很舒服，很轻松。而不好的设计，会浪费你更多的时间，提高成本。
近些年来，整洁架构，领域驱动设计特别火，很多程序员也都用上了。
接下来，我将基于实际开发，介绍go使用整洁架构的例子。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（五）：面向接口编程</title><link>https://lemon-1997.github.io/post/project-sqlboy-5.html</link><pubDate>Fri, 30 Dec 2022 19:27:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-5.html</guid><description>&lt;p>上一节过后，我们已经完成了所有代码的生成工作，最后的任务就是将解析，生成的模块全部集成在一起，并对外提供命令行调用（cmd）。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（四）：模板生成</title><link>https://lemon-1997.github.io/post/project-sqlboy-4.html</link><pubDate>Thu, 29 Dec 2022 20:28:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-4.html</guid><description>&lt;p>上一节我们完成了对SQL的解析，得到了表的相关信息。根据这些信息，我们就可以确定表相对应的curd代码，生成代码我们使用go自带的标准包text/template。
下面将为大家介绍template，并使用template实现代码生成功能。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（三）：ANTLR解析SQL</title><link>https://lemon-1997.github.io/post/project-sqlboy-3.html</link><pubDate>Wed, 28 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-3.html</guid><description>&lt;p>在上一节我们了解了go的抽象语法树AST，并利用go提供的AST包拿到了用户定义的sql。接下来就是如何解析sql，将sql语句中的表名，列字段的名称，类型等关键信息提取出来。
这就需要我们的语法分析了，在本项目中我们决定采用ANTLR来完成此任务，他是一个强大的工具，下文我将为大家介绍是如何实现的。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（二）：go抽象语法树（AST）</title><link>https://lemon-1997.github.io/post/project-sqlboy-2.html</link><pubDate>Tue, 27 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-2.html</guid><description>&lt;p>在上一篇文章中，介绍了我对这个项目的想法，总体设计与思路，而在项目中AST是一个很重要的模块，他主要负责输入的解析，还负责部分代码生成工作。
接下来，我将为大家介绍go中的抽象语法树，也会跟大家分享我是如何利用AST去实现功能的。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（一）：想法与设计</title><link>https://lemon-1997.github.io/post/project-sqlboy.html</link><pubDate>Mon, 26 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy.html</guid><description>&lt;p>在平常业务开发中，我们经常会使用一些数据库框架，诸如gorm，sqlc，ent等等。
每当想新加一个表时，就会产生很多重复性的操作，例如插入数据，读取数据，删除之类。
这大大降低了开发效率，于是，我萌生了一个想法，想把这些操作都交给程序去实现。&lt;/p></description></item><item><title>如何在go中写好单元测试</title><link>https://lemon-1997.github.io/post/best-test.html</link><pubDate>Wed, 24 Aug 2022 20:25:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/best-test.html</guid><description>&lt;p>当你还在用postman测试你的api时，那表明你还没找到使用go的最佳姿势，阅读这篇文章，一起来了解下go内置的测试框架，这会对你有所帮助。&lt;/p></description></item><item><title>mysql事务在go语言中的正确打开方式</title><link>https://lemon-1997.github.io/post/best-transaction.html</link><pubDate>Thu, 18 Aug 2022 21:45:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/best-transaction.html</guid><description>&lt;p>相信大家在做curd项目时经常会使用到mysql中的事务，这篇文章将会展示在go中实现mysql事务的几种方式，希望阅读后能够给你带来启发。&lt;/p></description></item><item><title>后端开发必备的工具及网站</title><link>https://lemon-1997.github.io/post/other-develop.html</link><pubDate>Mon, 15 Aug 2022 21:58:49 +0800</pubDate><guid>https://lemon-1997.github.io/post/other-develop.html</guid><description>&lt;p>other-develop&lt;/p></description></item></channel></rss>