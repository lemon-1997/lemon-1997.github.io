<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on lemon blog</title><link>https://lemon-1997.github.io/tags/go/</link><description>Recent content in go on lemon blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 28 Jan 2023 15:00:00 +0800</lastBuildDate><atom:link href="https://lemon-1997.github.io/tags/go/rss.xml" rel="self" type="application/rss+xml"/><item><title>go整洁架构简单模板</title><link>https://lemon-1997.github.io/post/best-clean.html</link><pubDate>Sat, 28 Jan 2023 15:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/best-clean.html</guid><description>&lt;p>在日常开发中，我们大多的精力都花在业务开发上，设计可能只占用了少部分的时间。
实际上，好的架构会让别人维护起来很舒服，很轻松。而不好的设计，会浪费你更多的时间，提高成本。
近些年来，整洁架构，领域驱动设计特别火，很多程序员也都用上了。
接下来，我将基于实际开发，介绍go使用整洁架构的例子。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（五）：面向接口编程</title><link>https://lemon-1997.github.io/post/project-sqlboy-5.html</link><pubDate>Fri, 30 Dec 2022 19:27:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-5.html</guid><description>&lt;p>上一节过后，我们已经完成了所有代码的生成工作，最后的任务就是将解析，生成的模块全部集成在一起，并对外提供命令行调用（cmd）。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（四）：模板生成</title><link>https://lemon-1997.github.io/post/project-sqlboy-4.html</link><pubDate>Thu, 29 Dec 2022 20:28:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-4.html</guid><description>&lt;p>上一节我们完成了对SQL的解析，得到了表的相关信息。根据这些信息，我们就可以确定表相对应的curd代码，生成代码我们使用go自带的标准包text/template。
下面将为大家介绍template，并使用template实现代码生成功能。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（三）：ANTLR解析SQL</title><link>https://lemon-1997.github.io/post/project-sqlboy-3.html</link><pubDate>Wed, 28 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-3.html</guid><description>&lt;p>在上一节我们了解了go的抽象语法树AST，并利用go提供的AST包拿到了用户定义的sql。接下来就是如何解析sql，将sql语句中的表名，列字段的名称，类型等关键信息提取出来。
这就需要我们的语法分析了，在本项目中我们决定采用ANTLR来完成此任务，他是一个强大的工具，下文我将为大家介绍是如何实现的。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（二）：go抽象语法树（AST）</title><link>https://lemon-1997.github.io/post/project-sqlboy-2.html</link><pubDate>Tue, 27 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-2.html</guid><description>&lt;p>在上一篇文章中，介绍了我对这个项目的想法，总体设计与思路，而在项目中AST是一个很重要的模块，他主要负责输入的解析，还负责部分代码生成工作。
接下来，我将为大家介绍go中的抽象语法树，也会跟大家分享我是如何利用AST去实现功能的。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（一）：想法与设计</title><link>https://lemon-1997.github.io/post/project-sqlboy.html</link><pubDate>Mon, 26 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy.html</guid><description>&lt;p>在平常业务开发中，我们经常会使用一些数据库框架，诸如gorm，sqlc，ent等等。
每当想新加一个表时，就会产生很多重复性的操作，例如插入数据，读取数据，删除之类。
这大大降低了开发效率，于是，我萌生了一个想法，想把这些操作都交给程序去实现。&lt;/p></description></item><item><title>如何在go中写好单元测试</title><link>https://lemon-1997.github.io/post/best-test.html</link><pubDate>Wed, 24 Aug 2022 20:25:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/best-test.html</guid><description>&lt;p>当你还在用postman测试你的api时，那表明你还没找到使用go的最佳姿势，阅读这篇文章，一起来了解下go内置的测试框架，这会对你有所帮助。&lt;/p></description></item><item><title>mysql事务在go语言中的正确打开方式</title><link>https://lemon-1997.github.io/post/best-transaction.html</link><pubDate>Thu, 18 Aug 2022 21:45:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/best-transaction.html</guid><description>&lt;p>相信大家在做curd项目时经常会使用到mysql中的事务，这篇文章将会展示在go中实现mysql事务的几种方式，希望阅读后能够给你带来启发。&lt;/p></description></item><item><title>Kratos的设计哲学</title><link>https://lemon-1997.github.io/post/frame-kratos.html</link><pubDate>Mon, 15 Aug 2022 21:54:54 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-kratos.html</guid><description>&lt;p>frame-kratos&lt;/p></description></item><item><title>go上下文Context包源码分析</title><link>https://lemon-1997.github.io/post/source-context.html</link><pubDate>Mon, 15 Aug 2022 21:47:46 +0800</pubDate><guid>https://lemon-1997.github.io/post/source-context.html</guid><description>&lt;p>source-context&lt;/p></description></item></channel></rss>