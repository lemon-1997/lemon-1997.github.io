<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grpc on lemon blog</title><link>https://lemon-1997.github.io/tags/grpc/</link><description>Recent content in grpc on lemon blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 31 Dec 2023 17:12:11 +0800</lastBuildDate><atom:link href="https://lemon-1997.github.io/tags/grpc/rss.xml" rel="self" type="application/rss+xml"/><item><title>动态gRPC-HTTP代理（二）：反射</title><link>https://lemon-1997.github.io/post/project-grpc-2.html</link><pubDate>Sun, 31 Dec 2023 17:12:11 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-2.html</guid><description>&lt;p>在上一篇博客中，我们介绍了将HTTP请求转换为gRPC请求的总体设计思路，讲述了实现代理所需要的基本模块。然而，实现这一设计的过程中，一个关键的技术挑战是如何在不知道具体gRPC服务定义的情况下，动态地调用这些服务。这正是本篇博客要深入探讨的内容——利用gRPC的反射机制实现动态服务调用。&lt;/p>
&lt;p>通过引入gRPC反射，我们的代理服务将能够更加智能化和自适应。它不仅可以处理已知的gRPC服务，还能在遇到新的、未知的服务时，通过反射机制动态地获取服务定义并进行调用。这将极大地增强我们代理服务的可扩展性和适应性。&lt;/p>
&lt;p>接下来，我们将首先简要介绍gRPC反射的基本概念和用途，然后通过具体的代码示例详细展示如何利用反射机制实现动态服务调用。让我们一起进入gRPC反射的世界，探索其为我们带来的无限可能。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（一）：设计</title><link>https://lemon-1997.github.io/post/project-grpc.html</link><pubDate>Sat, 25 Nov 2023 23:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc.html</guid><description>&lt;p>在当前主流的微服务架构中，许多公司选择使用gRPC协议作为内部通信机制。然而，在与外部系统进行交互时，HTTP仍然是不可或缺的协议。为了解决这一问题，常见的解决方案是采用grpc-gateway或其他网关自带的插件进行协议转换。但是，这些方案都存在一个共同的痛点：每次更新服务都需要手动更新proto或pb文件，并重新配置网关，这给开发者带来了不小的麻烦。因此，我们迫切需要一个不依赖于proto文件、能够动态感知gRPC服务的插件，以简化这一流程并提高开发效率。本文将探讨这一问题的背景、现有解决方案的局限性，以及我们所期望的理想插件应具备的特性。&lt;/p></description></item></channel></rss>