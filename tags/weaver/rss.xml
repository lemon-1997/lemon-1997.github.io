<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>weaver on lemon blog</title><link>https://lemon-1997.github.io/tags/weaver/</link><description>Recent content in weaver on lemon blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 15 Mar 2023 21:00:00 +0800</lastBuildDate><atom:link href="https://lemon-1997.github.io/tags/weaver/rss.xml" rel="self" type="application/rss+xml"/><item><title>Google分布式框架Weaver（二）：组件搭建商品后台</title><link>https://lemon-1997.github.io/post/frame-weaver-2.html</link><pubDate>Wed, 15 Mar 2023 21:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-weaver-2.html</guid><description>&lt;p>组件是weaver中的一个核心抽象，在我们的应用中，组件是一组接口的实现，可以理解为微服务对外提供的API。
所以，组件是学习这个框架的第一步，接下来我将使用组件从零搭建一个简易的商品后台系统。&lt;/p></description></item><item><title>Google分布式框架Weaver（一）：单体开发，微服务运行</title><link>https://lemon-1997.github.io/post/frame-weaver.html</link><pubDate>Wed, 08 Mar 2023 20:00:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/frame-weaver.html</guid><description>&lt;p>最近，Google开源了一个用于编写、部署和管理分布式应用程序的编程框架：Service Weaver。
这个框架设计思想很巧妙，使用该框架可以以函数调用的方式去调用其他服务，无需考虑任何网络或者序列化问题，在部署时却能够以微服务的方式运行。
这样一来，开发者可以在自己的机器上运行、测试和调试，非常的方便。&lt;/p></description></item></channel></rss>