<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码分析 on lemon blog</title><link>https://lemon-1997.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><description>Recent content in 源码分析 on lemon blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 14 Aug 2024 17:15:00 +0800</lastBuildDate><atom:link href="https://lemon-1997.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/rss.xml" rel="self" type="application/rss+xml"/><item><title>gRPC Metadata的误解</title><link>https://lemon-1997.github.io/post/source-metadata.html</link><pubDate>Wed, 14 Aug 2024 17:15:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/source-metadata.html</guid><description>&lt;p>最近在处理线上问题时，我遇到一个与 gRPC Metadata 相关的困惑。起初，我以为在 gRPC 请求中，metadata 中相同的 key 会发生覆盖，但实际情况并非如此。相同的 key 并不会覆盖前一个值，反而会形成一个数组，就像 HTTP header 的设计一样。这一现象在初次遇到时并不明显，为了弄清楚其中的原理，我决定深入源码进行分析，最终发现了其中的细节并排查出了导致问题的根源。&lt;/p></description></item><item><title>解决重复请求和缓存击穿，go神器SingleFlight深度解析</title><link>https://lemon-1997.github.io/post/source-singleFlight.html</link><pubDate>Wed, 01 Mar 2023 22:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/source-singleFlight.html</guid><description>&lt;p>当应用程序面临高并发请求时，重复请求往往是一种常见的问题。针对这一问题，Go 语言中提供了 SingleFlight 库，它可以有效地解决并发请求中的重复请求问题，提升应用程序的性能和稳定性。在本文中，我们将介绍 SingleFlight 库的作用和价值，并详细讲解如何在 Go 语言中使用 SingleFlight 库来解决并发请求中的重复请求问题。同时，我们将探讨 SingleFlight 库的原理和实现，以及其在实际项目中的应用场景和注意事项。&lt;/p></description></item></channel></rss>