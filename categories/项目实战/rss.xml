<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>项目实战 on lemon blog</title><link>https://lemon-1997.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link><description>Recent content in 项目实战 on lemon blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 13 Jan 2024 13:15:19 +0800</lastBuildDate><atom:link href="https://lemon-1997.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/rss.xml" rel="self" type="application/rss+xml"/><item><title>动态gRPC-HTTP代理（四）：编解码</title><link>https://lemon-1997.github.io/post/project-grpc-4.html</link><pubDate>Sat, 13 Jan 2024 13:15:19 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-4.html</guid><description>&lt;p>在构建将HTTP请求代理并转换为gRPC调用后端服务的系统中，编解码模块起到了至关重要的作用。它承担着将HTTP请求和响应与gRPC消息格式之间进行转换的任务，确保了请求能够顺利地传递到目标服务并返回结果。本文将详细介绍编解码模块的设计与实现，以及如何处理转换过程中的各种细节和挑战。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（三）：路由</title><link>https://lemon-1997.github.io/post/project-grpc-3.html</link><pubDate>Sat, 06 Jan 2024 21:50:20 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-3.html</guid><description>&lt;p>在构建高效、可扩展的后端服务体系中，路由模块起着至关重要的作用。它负责接收前端请求，并根据请求中的信息，精准地将请求导向到相应的后端gRPC服务。本文将深入探讨如何设计并实现一个稳健、高效的路由模块，以确保请求能够准确、快速地到达目标服务。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（二）：反射</title><link>https://lemon-1997.github.io/post/project-grpc-2.html</link><pubDate>Sun, 31 Dec 2023 17:12:11 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc-2.html</guid><description>&lt;p>在上一篇博客中，我们介绍了将HTTP请求转换为gRPC请求的总体设计思路，讲述了实现代理所需要的基本模块。然而，实现这一设计的过程中，一个关键的技术挑战是如何在不知道具体gRPC服务定义的情况下，动态地调用这些服务。这正是本篇博客要深入探讨的内容——利用gRPC的反射机制实现动态服务调用。&lt;/p>
&lt;p>通过引入gRPC反射，我们的代理服务将能够更加智能化和自适应。它不仅可以处理已知的gRPC服务，还能在遇到新的、未知的服务时，通过反射机制动态地获取服务定义并进行调用。这将极大地增强我们代理服务的可扩展性和适应性。&lt;/p>
&lt;p>接下来，我们将首先简要介绍gRPC反射的基本概念和用途，然后通过具体的代码示例详细展示如何利用反射机制实现动态服务调用。让我们一起进入gRPC反射的世界，探索其为我们带来的无限可能。&lt;/p></description></item><item><title>动态gRPC-HTTP代理（一）：设计</title><link>https://lemon-1997.github.io/post/project-grpc.html</link><pubDate>Sat, 25 Nov 2023 23:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-grpc.html</guid><description>&lt;p>在当前主流的微服务架构中，许多公司选择使用gRPC协议作为内部通信机制。然而，在与外部系统进行交互时，HTTP仍然是不可或缺的协议。为了解决这一问题，常见的解决方案是采用grpc-gateway或其他网关自带的插件进行协议转换。但是，这些方案都存在一个共同的痛点：每次更新服务都需要手动更新proto或pb文件，并重新配置网关，这给开发者带来了不小的麻烦。因此，我们迫切需要一个不依赖于proto文件、能够动态感知gRPC服务的插件，以简化这一流程并提高开发效率。本文将探讨这一问题的背景、现有解决方案的局限性，以及我们所期望的理想插件应具备的特性。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（五）：面向接口编程</title><link>https://lemon-1997.github.io/post/project-sqlboy-5.html</link><pubDate>Fri, 30 Dec 2022 19:27:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-5.html</guid><description>&lt;p>上一节过后，我们已经完成了所有代码的生成工作，最后的任务就是将解析，生成的模块全部集成在一起，并对外提供命令行调用（cmd）。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（四）：模板生成</title><link>https://lemon-1997.github.io/post/project-sqlboy-4.html</link><pubDate>Thu, 29 Dec 2022 20:28:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-4.html</guid><description>&lt;p>上一节我们完成了对SQL的解析，得到了表的相关信息。根据这些信息，我们就可以确定表相对应的curd代码，生成代码我们使用go自带的标准包text/template。
下面将为大家介绍template，并使用template实现代码生成功能。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（三）：ANTLR解析SQL</title><link>https://lemon-1997.github.io/post/project-sqlboy-3.html</link><pubDate>Wed, 28 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-3.html</guid><description>&lt;p>在上一节我们了解了go的抽象语法树AST，并利用go提供的AST包拿到了用户定义的sql。接下来就是如何解析sql，将sql语句中的表名，列字段的名称，类型等关键信息提取出来。
这就需要我们的语法分析了，在本项目中我们决定采用ANTLR来完成此任务，他是一个强大的工具，下文我将为大家介绍是如何实现的。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（二）：go抽象语法树（AST）</title><link>https://lemon-1997.github.io/post/project-sqlboy-2.html</link><pubDate>Tue, 27 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy-2.html</guid><description>&lt;p>在上一篇文章中，介绍了我对这个项目的想法，总体设计与思路，而在项目中AST是一个很重要的模块，他主要负责输入的解析，还负责部分代码生成工作。
接下来，我将为大家介绍go中的抽象语法树，也会跟大家分享我是如何利用AST去实现功能的。&lt;/p></description></item><item><title>go自动化生成数据库curd代码（一）：想法与设计</title><link>https://lemon-1997.github.io/post/project-sqlboy.html</link><pubDate>Mon, 26 Dec 2022 20:30:00 +0800</pubDate><guid>https://lemon-1997.github.io/post/project-sqlboy.html</guid><description>&lt;p>在平常业务开发中，我们经常会使用一些数据库框架，诸如gorm，sqlc，ent等等。
每当想新加一个表时，就会产生很多重复性的操作，例如插入数据，读取数据，删除之类。
这大大降低了开发效率，于是，我萌生了一个想法，想把这些操作都交给程序去实现。&lt;/p></description></item></channel></rss>